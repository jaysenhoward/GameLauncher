//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Input/UI_Input.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @UI_Input: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @UI_Input()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""UI_Input"",
    ""maps"": [
        {
            ""name"": ""UI"",
            ""id"": ""05071e9e-492f-4ac8-b5c5-9a4c7d2714bd"",
            ""actions"": [
                {
                    ""name"": ""Up"",
                    ""type"": ""Button"",
                    ""id"": ""1078b622-c981-4087-bb23-69a2e3661325"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Play"",
                    ""type"": ""Button"",
                    ""id"": ""bbc49d57-fcf5-4cc8-8e21-19f5c19bc7ff"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Down"",
                    ""type"": ""Button"",
                    ""id"": ""ed499a3e-718f-41bd-b7c9-0a3e94082371"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""b8285103-f9bb-44b5-b2ba-9e893504298f"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""Play"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d0dc9a28-5c42-4a99-88d7-593405b4b1ce"",
                    ""path"": ""<HID::Microntek              USB Joystick          >/button4"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Joystick"",
                    ""action"": ""Down"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""64c6c46c-23e0-46ae-bf25-aed5e34f70ac"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""Down"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8b904764-d470-4575-8fda-b23c5752f94b"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""Up"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""140af7fc-c685-4caf-8520-8df6f40f9559"",
                    ""path"": ""<HID::Microntek              USB Joystick          >/button2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Joystick"",
                    ""action"": ""Up"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""4ButtonMapping"",
            ""id"": ""142a0e7c-2b9a-49b3-971c-c2086e3362e1"",
            ""actions"": [
                {
                    ""name"": ""Green"",
                    ""type"": ""Button"",
                    ""id"": ""db8de83c-625b-4891-ac8d-80f3852641c9"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Blue"",
                    ""type"": ""Button"",
                    ""id"": ""64dd2835-48f7-4de3-8159-4ddf0d9bb3b5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Red"",
                    ""type"": ""Button"",
                    ""id"": ""a3754f8e-e6f1-40a1-923e-55d24732d6d3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Yellow"",
                    ""type"": ""Button"",
                    ""id"": ""0ce03e26-d364-48b9-88ab-bbed4d161f3c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""c769f96a-1637-4b7d-ac60-300479dab25c"",
                    ""path"": ""<HID::Microntek              USB Joystick          >/button4"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Joystick"",
                    ""action"": ""Green"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""daa8f0dd-d6e2-4f37-adf1-f77157d84117"",
                    ""path"": ""<HID::Microntek              USB Joystick          >/button3"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Joystick"",
                    ""action"": ""Blue"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""767da215-0e13-46da-b09e-43d953d8eaf7"",
                    ""path"": ""<HID::Microntek              USB Joystick          >/button2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Joystick"",
                    ""action"": ""Yellow"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d2e91894-9e3a-4810-a4a0-3dd3ecf42e98"",
                    ""path"": ""<Joystick>/trigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Joystick"",
                    ""action"": ""Red"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard&Mouse"",
            ""bindingGroup"": ""Keyboard&Mouse"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Gamepad"",
            ""bindingGroup"": ""Gamepad"",
            ""devices"": [
                {
                    ""devicePath"": ""<Gamepad>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Touch"",
            ""bindingGroup"": ""Touch"",
            ""devices"": [
                {
                    ""devicePath"": ""<Touchscreen>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Joystick"",
            ""bindingGroup"": ""Joystick"",
            ""devices"": [
                {
                    ""devicePath"": ""<Joystick>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""XR"",
            ""bindingGroup"": ""XR"",
            ""devices"": [
                {
                    ""devicePath"": ""<XRController>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // UI
        m_UI = asset.FindActionMap("UI", throwIfNotFound: true);
        m_UI_Up = m_UI.FindAction("Up", throwIfNotFound: true);
        m_UI_Play = m_UI.FindAction("Play", throwIfNotFound: true);
        m_UI_Down = m_UI.FindAction("Down", throwIfNotFound: true);
        // 4ButtonMapping
        m__4ButtonMapping = asset.FindActionMap("4ButtonMapping", throwIfNotFound: true);
        m__4ButtonMapping_Green = m__4ButtonMapping.FindAction("Green", throwIfNotFound: true);
        m__4ButtonMapping_Blue = m__4ButtonMapping.FindAction("Blue", throwIfNotFound: true);
        m__4ButtonMapping_Red = m__4ButtonMapping.FindAction("Red", throwIfNotFound: true);
        m__4ButtonMapping_Yellow = m__4ButtonMapping.FindAction("Yellow", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // UI
    private readonly InputActionMap m_UI;
    private List<IUIActions> m_UIActionsCallbackInterfaces = new List<IUIActions>();
    private readonly InputAction m_UI_Up;
    private readonly InputAction m_UI_Play;
    private readonly InputAction m_UI_Down;
    public struct UIActions
    {
        private @UI_Input m_Wrapper;
        public UIActions(@UI_Input wrapper) { m_Wrapper = wrapper; }
        public InputAction @Up => m_Wrapper.m_UI_Up;
        public InputAction @Play => m_Wrapper.m_UI_Play;
        public InputAction @Down => m_Wrapper.m_UI_Down;
        public InputActionMap Get() { return m_Wrapper.m_UI; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(UIActions set) { return set.Get(); }
        public void AddCallbacks(IUIActions instance)
        {
            if (instance == null || m_Wrapper.m_UIActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_UIActionsCallbackInterfaces.Add(instance);
            @Up.started += instance.OnUp;
            @Up.performed += instance.OnUp;
            @Up.canceled += instance.OnUp;
            @Play.started += instance.OnPlay;
            @Play.performed += instance.OnPlay;
            @Play.canceled += instance.OnPlay;
            @Down.started += instance.OnDown;
            @Down.performed += instance.OnDown;
            @Down.canceled += instance.OnDown;
        }

        private void UnregisterCallbacks(IUIActions instance)
        {
            @Up.started -= instance.OnUp;
            @Up.performed -= instance.OnUp;
            @Up.canceled -= instance.OnUp;
            @Play.started -= instance.OnPlay;
            @Play.performed -= instance.OnPlay;
            @Play.canceled -= instance.OnPlay;
            @Down.started -= instance.OnDown;
            @Down.performed -= instance.OnDown;
            @Down.canceled -= instance.OnDown;
        }

        public void RemoveCallbacks(IUIActions instance)
        {
            if (m_Wrapper.m_UIActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IUIActions instance)
        {
            foreach (var item in m_Wrapper.m_UIActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_UIActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public UIActions @UI => new UIActions(this);

    // 4ButtonMapping
    private readonly InputActionMap m__4ButtonMapping;
    private List<I_4ButtonMappingActions> m__4ButtonMappingActionsCallbackInterfaces = new List<I_4ButtonMappingActions>();
    private readonly InputAction m__4ButtonMapping_Green;
    private readonly InputAction m__4ButtonMapping_Blue;
    private readonly InputAction m__4ButtonMapping_Red;
    private readonly InputAction m__4ButtonMapping_Yellow;
    public struct _4ButtonMappingActions
    {
        private @UI_Input m_Wrapper;
        public _4ButtonMappingActions(@UI_Input wrapper) { m_Wrapper = wrapper; }
        public InputAction @Green => m_Wrapper.m__4ButtonMapping_Green;
        public InputAction @Blue => m_Wrapper.m__4ButtonMapping_Blue;
        public InputAction @Red => m_Wrapper.m__4ButtonMapping_Red;
        public InputAction @Yellow => m_Wrapper.m__4ButtonMapping_Yellow;
        public InputActionMap Get() { return m_Wrapper.m__4ButtonMapping; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(_4ButtonMappingActions set) { return set.Get(); }
        public void AddCallbacks(I_4ButtonMappingActions instance)
        {
            if (instance == null || m_Wrapper.m__4ButtonMappingActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m__4ButtonMappingActionsCallbackInterfaces.Add(instance);
            @Green.started += instance.OnGreen;
            @Green.performed += instance.OnGreen;
            @Green.canceled += instance.OnGreen;
            @Blue.started += instance.OnBlue;
            @Blue.performed += instance.OnBlue;
            @Blue.canceled += instance.OnBlue;
            @Red.started += instance.OnRed;
            @Red.performed += instance.OnRed;
            @Red.canceled += instance.OnRed;
            @Yellow.started += instance.OnYellow;
            @Yellow.performed += instance.OnYellow;
            @Yellow.canceled += instance.OnYellow;
        }

        private void UnregisterCallbacks(I_4ButtonMappingActions instance)
        {
            @Green.started -= instance.OnGreen;
            @Green.performed -= instance.OnGreen;
            @Green.canceled -= instance.OnGreen;
            @Blue.started -= instance.OnBlue;
            @Blue.performed -= instance.OnBlue;
            @Blue.canceled -= instance.OnBlue;
            @Red.started -= instance.OnRed;
            @Red.performed -= instance.OnRed;
            @Red.canceled -= instance.OnRed;
            @Yellow.started -= instance.OnYellow;
            @Yellow.performed -= instance.OnYellow;
            @Yellow.canceled -= instance.OnYellow;
        }

        public void RemoveCallbacks(I_4ButtonMappingActions instance)
        {
            if (m_Wrapper.m__4ButtonMappingActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(I_4ButtonMappingActions instance)
        {
            foreach (var item in m_Wrapper.m__4ButtonMappingActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m__4ButtonMappingActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public _4ButtonMappingActions @_4ButtonMapping => new _4ButtonMappingActions(this);
    private int m_KeyboardMouseSchemeIndex = -1;
    public InputControlScheme KeyboardMouseScheme
    {
        get
        {
            if (m_KeyboardMouseSchemeIndex == -1) m_KeyboardMouseSchemeIndex = asset.FindControlSchemeIndex("Keyboard&Mouse");
            return asset.controlSchemes[m_KeyboardMouseSchemeIndex];
        }
    }
    private int m_GamepadSchemeIndex = -1;
    public InputControlScheme GamepadScheme
    {
        get
        {
            if (m_GamepadSchemeIndex == -1) m_GamepadSchemeIndex = asset.FindControlSchemeIndex("Gamepad");
            return asset.controlSchemes[m_GamepadSchemeIndex];
        }
    }
    private int m_TouchSchemeIndex = -1;
    public InputControlScheme TouchScheme
    {
        get
        {
            if (m_TouchSchemeIndex == -1) m_TouchSchemeIndex = asset.FindControlSchemeIndex("Touch");
            return asset.controlSchemes[m_TouchSchemeIndex];
        }
    }
    private int m_JoystickSchemeIndex = -1;
    public InputControlScheme JoystickScheme
    {
        get
        {
            if (m_JoystickSchemeIndex == -1) m_JoystickSchemeIndex = asset.FindControlSchemeIndex("Joystick");
            return asset.controlSchemes[m_JoystickSchemeIndex];
        }
    }
    private int m_XRSchemeIndex = -1;
    public InputControlScheme XRScheme
    {
        get
        {
            if (m_XRSchemeIndex == -1) m_XRSchemeIndex = asset.FindControlSchemeIndex("XR");
            return asset.controlSchemes[m_XRSchemeIndex];
        }
    }
    public interface IUIActions
    {
        void OnUp(InputAction.CallbackContext context);
        void OnPlay(InputAction.CallbackContext context);
        void OnDown(InputAction.CallbackContext context);
    }
    public interface I_4ButtonMappingActions
    {
        void OnGreen(InputAction.CallbackContext context);
        void OnBlue(InputAction.CallbackContext context);
        void OnRed(InputAction.CallbackContext context);
        void OnYellow(InputAction.CallbackContext context);
    }
}
